#Kubernetes CLI testing
kubectl version

#Running a pod of nginx
kubectl run my-nginx --image nginx

#List of pod
kubectl get pods

#List all objects
kubectl get all

NAME           READY   STATUS    RESTARTS   AGE
pod/my-nginx   1/1     Running   0          3m14s

NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
service/kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   5m19s

#Creating a Deployment
kubectl create deployment my-nginx --image nginx

#Delete the pods and deployment
kubectl delete pod my-nginx

kubectl delete deployment my-nginx
           
#Scaling Replica Set
kubectl create deployment my-apache --image httpd

kubectl scale deploy/my-apache --  2
kubectl scale deploy my-apache --replicas 2

#Inspecting the resources
kubectl get deploy/my-apache

kubectl get nodes

kubectl get pods

#show more with wide output.
kubectl get all -o wide

#Describe command to get the info
kubectl describe deploy/my-apache

#Watching resources.
kubectl get pods -w

#Waiting for new events.
kubectl get events --watch-only

#Container logs in kubernetes
kubectl logs deploy/my-apache

kubectl logs deploy/my-apache --follow --tail 1 //Wait for new records.

kubectl logs pod/my-apache-xxx-yyy -c httpd //for certain pod in a container
SSSSG
kubectl logs pod/my-apache-xxx-yyy -all-containers=true //all containers

kubectl logs -l app=my-apache //multiple pods logs

#Exposing a service
kubectl expose deployment/httpenv --port 8888

#To access the above port
kubectl run http-shell --rm -it --image nginx --bash

#Node port
kubectl expose deployment/httpenv --port 8888 --name httpenv-np --type NodePort

//Right port is exposed to outside world
httpenv-np   NodePort    10.105.53.185   <none>        8888:32522/TCP   2m17s

#Docker desktop provides built in LoadBalancer that published the --port on localhost.
kubectl expose deployment/httpenv --port 8888 --name httpenv-lb --type LoadBalancer
